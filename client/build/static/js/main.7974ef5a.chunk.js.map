{"version":3,"sources":["components/Navbar.js","gqloperations/mutations.js","gqloperations/queries.js","components/CreateQuotes.js","components/Login.js","components/Profile.js","components/Signup.js","components/Home.js","components/OtherUserProfile.js","components/NotFound.js","routes.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","token","localStorage","getItem","navigate","useNavigate","client","useApolloClient","className","to","id","onClick","removeItem","clearStore","then","resetStore","SIGNUP_USER","gql","LOGIN_USER","CREATE_QUOTE","GET_ALL_QUOTES","GET_MY_PROFILE","GET_USER_BY_ID","CreateQuotes","useState","quote","setQuote","useMutation","refetchQueries","createQuote","data","loading","error","console","log","message","onSubmit","e","preventDefault","variables","name","type","vlaue","onChange","target","value","placeholder","Login","formData","setFormData","signinUser","handleChange","setItem","user","userSignin","required","Profile","useQuery","style","border","src","firstName","alt","lastName","email","quotes","map","q","Signup","signupUser","userNew","Home","i","by","_id","OtherUserProfile","userid","useParams","NotFound","width","height","frameBorder","class","allowFullScreen","routes","path","element","App","elememnt","useRoutes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ApolloClient","uri","cache","InMemoryCache","headers","authorization","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.7974ef5a.chunk.js","sourcesContent":["import { useApolloClient } from '@apollo/client'\nimport React, { useContext } from 'react'\nimport {Link, useNavigate} from 'react-router-dom'\n\nexport default function Navbar() {\n   \n\n    const token = localStorage.getItem(\"token\")\n    \n    const navigate = useNavigate()\n\n\n    \n   const client = useApolloClient();\n//   const refetchCurrentUser = useContext(CurrentUserContext);\n\n    const handleLogout= () =>{\n        localStorage.removeItem(\"token\")\n       // client.clearStore()\n       client.clearStore().then(()=>{\n        client.resetStore();\n        navigate('/login')\n       })\n    }\n\n\n  return (\n    <nav>\n    <div className=\"nav-wrapper\">\n      <Link to=\"/\" className=\"brand-logo left\">Quote APP</Link>\n      <ul id=\"nav-mobile\" className=\"right\">\n          {\n              token ?\n              <>\n              <li><Link to=\"/profile\">Profile</Link></li>\n              <li><Link to=\"/create\">Create</Link></li>\n              <li><button onClick={handleLogout} className='red btn'>Logout</button></li>\n              </> : \n              <>\n              <li><Link to=\"/login\">Login</Link></li>\n              <li><Link to=\"/signup\">Sign Up</Link></li>\n              </>\n          } \n      </ul>\n    </div>\n  </nav>\n  )\n}\n","import {gql} from '@apollo/client'\n\n\nexport const SIGNUP_USER = gql`\nmutation createUser($userNew: UserInput!) {\n    user:signupUser(userNew: $userNew){\n      firstName\n    }\n  }\n`\n\nexport const LOGIN_USER = gql`\nmutation signinUser($userSignin: UserSigninInput!) {\n    user:signinUser(userSignin: $userSignin){\n      token\n    }\n  }\n`\n\nexport const CREATE_QUOTE = gql`\nmutation createQuote($name:String!){\n    quote:createQuote(name:$name)\n    \n  }\n`","import {gql} from '@apollo/client'\n\n\nexport const GET_ALL_QUOTES = gql`\nquery getAllQuotes{\n    quotes{\n      name\n      by  {\n        _id\n        firstName\n      }\n    }\n  }\n`\n\nexport const GET_MY_PROFILE = gql`\n    query getMyProfile{\n        user:myprofile{\n            firstName\n            lastName\n            email\n            quotes{\n                name\n            }\n        }\n    }\n`\nexport const GET_USER_BY_ID = gql`\nquery getUserById($userid:ID!) {\n    user(_id:$userid){\n      _id\n      firstName\n      lastName\n      email\n      quotes {\n        name\n      }\n    }\n  }\n`\n","import { useMutation } from '@apollo/client'\nimport React, {useState} from 'react'\nimport { CREATE_QUOTE } from '../gqloperations/mutations'\nimport { GET_ALL_QUOTES } from '../gqloperations/queries'\n\nexport default function CreateQuotes() {\n\n    const [quote, setQuote] = useState(\"\")\n    const [createQuote, {data, loading, error} ]=useMutation(CREATE_QUOTE, {\n        refetchQueries:[GET_ALL_QUOTES, 'getAllQuotes', 'getMyProfile',]\n    })\n    \n    const handleSubmit = (e) =>{\n       e.preventDefault()\n       console.log(quote)\n       createQuote({\n           variables:{\n               name:quote\n           }\n       })\n    }\n\n    if(loading) return <h1>Loading....</h1>\n    if(error) {\n        console.log(error.message)\n    }\n\n    if(data) {\n        console.log(data)\n    }\n\n    \n\n  return (\n    <div className='container my-container' >\n        {\n            error &&\n            <div className='red card-panel'>{error.message}</div>\n        }\n        {\n            data &&  <div className='green card-panel'>{data.quote} </div>\n        }\n        <h5>Create Quote</h5>\n        <form onSubmit={handleSubmit}>\n         <input \n         type=\"text\" \n         vlaue={quote}\n         onChange={e=>setQuote(e.target.value)}\n         placeholder=\"write Quote\"\n         />\n         <button type=\"submit\" className='btn green'>Create</button>\n         </form>\n    </div>\n  )\n}\n","import { useMutation } from '@apollo/client'\nimport React, {useState} from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { LOGIN_USER } from '../gqloperations/mutations'\n\n\nexport default function Login () {\n\n    const navigate = useNavigate()\n    const [formData, setFormData] = useState({})\n    const[signinUser, {data, loading, error} ]=useMutation(LOGIN_USER)\n\n    const handleSubmit = (e) =>{\n            e.preventDefault()\n            console.log(formData)\n            signinUser({\n                variables:{\n                    userSignin: formData\n                }\n            })\n    }\n\n    const handleChange = (e) =>{\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    if(loading) return <h1>Loading....</h1>\n    if(data){\n        localStorage.setItem(\"token\", data.user.token)\n        navigate(\"/\")\n    }\n\n  return (\n    <div className='container my-container'>\n        {\n            error &&\n            <div className='red card-panel'>{error.message}</div>\n        }\n        <h5>Login</h5>\n        <form onSubmit={handleSubmit}>\n            <input \n            type = \"email\"\n            placeholder=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            required\n            />\n             <input \n            type = \"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            onChange={handleChange}\n            required\n            />\n            <Link to=\"/signup\"><p>Don't have an account ? </p></Link>\n            <button type=\"submit\" className='btn 673ab7 deep-purple'>Login</button>\n        </form>\n    </div>\n  )\n}\n","import { useQuery } from '@apollo/client'\nimport React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { GET_MY_PROFILE } from '../gqloperations/queries'\n\nexport default function Profile() {\n    const {loading, error, data}=useQuery(GET_MY_PROFILE)\n    const navigate= useNavigate()\n\n    if(!localStorage.getItem(\"token\")){\n        navigate(\"/login\")\n        return <h1>Unauthorized</h1>\n    }\n    if(loading) return <h1>Loading....</h1>\n    if(error) {\n        console.log(error.message)\n    }\n    console.log(data)\n\n  return (\n    <div className='container my-container'>\n        <h5>Profile</h5>\n        <div className='center-align'>\n            <img className='circle' style={{border: \"2px solid\"}} src={`https://robohash.org/${data.user.firstName}.png?size=200x200`} alt=\"pic\"/>\n            <h5>{data.user.firstName} {data.user.lastName}</h5>\n            <h6>Email - {data.user.email}</h6>\n        </div>\n        <h3>Your Quotes</h3>\n        {\n            data.user.quotes.map((q)=>{\n                    return <>\n                            <blockquote>\n                                <h6>{q.name}</h6>\n                            </blockquote>                  \n                    </>\n            })\n        }\n    </div>\n  )\n}\n","import { useMutation } from '@apollo/client'\nimport React, {useState} from 'react'\nimport { Link } from 'react-router-dom'\nimport { SIGNUP_USER } from '../gqloperations/mutations'\n\n\n\nexport default function Signup() {\n\n    const [formData, setFormData] = useState({})\n    const [signupUser, {data, loading, error}]= useMutation(SIGNUP_USER)\n\n    const handleSubmit = (e) =>{\n            e.preventDefault()\n            console.log(formData)\n            signupUser({\n                variables:{\n                    userNew: formData\n                }\n            })\n    }\n\n    const handleChange = (e) =>{\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    if(loading) return <h1>Loading....</h1>\n    if(error) {\n        console.log(error.message)\n    }\n\n  return (\n    <div className='container my-container'>\n        {\n            error &&\n            <div className='red card-panel'>{error.message}</div>\n        }\n        {\n            data && data.user && <div className='green card-panel'>{data.user.firstName} is SignedUp. You can login Now</div>\n        }\n        <h5>Signup</h5>\n        <form onSubmit={handleSubmit}>\n        <input \n            type = \"text\"\n            placeholder=\"First Name\"\n            name=\"firstName\"\n            onChange={handleChange}\n            required\n            />\n            <input \n            type = \"text\"\n            placeholder=\"Last Name\"\n            name=\"lastName\"\n            onChange={handleChange}\n            required\n            />\n            <input \n            type = \"email\"\n            placeholder=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            required\n            />\n             <input \n            type = \"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            onChange={handleChange}\n            required\n            />\n            <Link to=\"/login\"><p>Already have an account ? </p></Link>\n            <button type=\"submit\" className='btn 673ab7 deep-purple'>Submit</button>\n        </form>\n    </div>\n  )\n}\n","import { useQuery } from '@apollo/client'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { GET_ALL_QUOTES } from '../gqloperations/queries'\n\nexport default function Home() {\n\n    const {loading, error, data} = useQuery(GET_ALL_QUOTES)\n\n\n    if(loading) return <h1>Loading....</h1>\n    if(error) {\n        console.log(error.message)\n    }\n\n  return (\n    <div  className='container my-container'>\n         <h5>List of Quotes</h5>\n        {\n            data.quotes.map((quote, i)=>{\n                return (\n                    <blockquote key={i}>\n                    <h6>{quote.name}</h6>\n                    <Link to={`/profile/${quote.by._id}`}><p className='right-align'>{quote.by.firstName}</p></Link>\n                    </blockquote>\n                )\n            })\n        }\n       \n        \n\n    </div>\n  )\n}\n","import { useQuery } from '@apollo/client'\nimport React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport {  GET_USER_BY_ID } from '../gqloperations/queries'\nimport {useParams} from 'react-router-dom'\n\n\n\n\nexport default function OtherUserProfile() {\n    const {userid} = useParams()\n    const {loading, error, data}=useQuery(GET_USER_BY_ID,{\n        variables:{\n            userid\n        }\n    })\n    \n\n    if(loading) return <h1>Loading....</h1>\n    if(error) {\n        console.log(error.message)\n    }\n    console.log(data)\n\n  return (\n    <div className='container my-container'>\n        <h5>Profile</h5>\n        <div className='center-align'>\n            <img className='circle' style={{border: \"2px solid\"}} src={`https://robohash.org/${data.user.firstName}.png?size=200x200`} alt=\"pic\"/>\n            <h5>{data.user.firstName} {data.user.lastName}</h5>\n            <h6>Email - {data.user.email}</h6>\n        </div>\n        <h3>Your Quotes</h3>\n        {\n            data.user.quotes.map((q)=>{\n                    return <>\n                            <blockquote>\n                                <h6>{q.name}</h6>\n                            </blockquote>                  \n                    </>\n            })\n        }\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function NotFound() {\n  return (\n    <div className='center'>\n        <h2>Not Found</h2>\n        <iframe src=\"https://giphy.com/embed/SDUiharA58JhGCwDqP\" width=\"480\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n    </div>\n  )\n}\n","import './App.css';\nimport CreateQuotes from './components/CreateQuotes';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Signup from './components/Signup';\nimport Home from './components/Home';\nimport OtherUserProfile from './components/OtherUserProfile';\nimport NotFound from './components/NotFound';\n\n\nexport const routes = [\n    { path : '/' , element : <Home/> },\n    { path : '/create' , element : <CreateQuotes/> },\n    { path : '/login' , element : <Login/> },\n    { path : '/signup' , element : <Signup/> },\n    { path : '/profile' , element : <Profile/> },\n    { path : '/profile/:userid' , element : <OtherUserProfile/> },\n    { path : '*' , element : <NotFound/> }\n\n]","import './App.css';\n// import CreateQuotes from './components/CreateQuotes';\n// import Login from './components/Login';\n// import Profile from './components/Profile';\n// import Signup from './components/Signup';\n// import Home from './components/Home';\nimport Navbar from './components/Navbar';\nimport {routes} from './routes'\nimport { useRoutes } from 'react-router-dom';\n\n\nfunction App() {\n\n  const elememnt=useRoutes(routes)\n\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      {elememnt}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom'\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n  headers:{\n    authorization: localStorage.getItem(\"token\") || \"\"\n  }\n});\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ApolloProvider client={client}>\n         <App />\n      </ApolloProvider>  \n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}